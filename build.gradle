buildscript {
    ext {
        dependencyManagementVersion = '1.0.5.RELEASE'
        springBootVersion = '1.5.15.RELEASE'
        nodePluginVersion = '1.2.0'
    }
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}")
    }
}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'idea'

    ext {
        versions = [
            springPlatform : 'Brussels-SR12',
            springCloud    : 'Edgware.SR4',
            awsJavaSDK     : '1.11.160'
        ]
    }

    repositories {
        maven { url "https://repo.spring.io/libs-release" }
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "io.spring.platform:platform-bom:${versions.springPlatform}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"
            mavenBom "com.amazonaws:aws-java-sdk-bom:${versions.awsJavaSDK}"
        }
    }

    dependencies {
        compile 'org.projectlombok:lombok'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    compileJava.options.encoding = 'UTF-8'

    task copyConfig(type: Copy) {
        from fileTree("${rootProject.projectDir}/config/${project.name}.conf")
        into "$buildDir/libs"
    }
    build.dependsOn(copyConfig)
}

project('legacy-web') {
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-web'

        runtime('org.springframework.boot:spring-boot-starter-freemarker')
        runtime('org.webjars.bower:bootstrap:4.1.3')
        runtime('org.webjars.bower:jquery:3.3.1')
    }

    bootRepackage {
        executable = true
    }
}

project('modern-web') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.moowork.node'

    ext {
        generatedClientDir = "${project.projectDir}/src/generated/client-resources"
    }

    dependencies {
        compile 'org.springframework.cloud:spring-cloud-starter-zuul'
        compile 'org.springframework.boot:spring-boot-starter-web'

        compile("org.springframework.boot:spring-boot-starter-thymeleaf")
        runtime("net.sourceforge.nekohtml:nekohtml:1.9.22")
    }

    sourceSets {
        main {
            resources.srcDirs += [generatedClientDir]
        }
    }

    jar {
        from { fileTree(dir: generatedClientDir) }
    }

    bootRepackage {
        executable = true
    }

    clean {
        delete generatedClientDir
    }

//    idea {
//        module {
//            resourceDirs += sourceSets.generated.resources.srcDirs
//        }
//    }

    task clientBuild(type: YarnTask) {
        runner.workingDir = file("${rootProject.projectDir}/modern-web-client")
        yarnCommand = ['build']
        args = []
    }
    jar.dependsOn clientBuild
}